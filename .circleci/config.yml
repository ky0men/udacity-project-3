# Use the latest version of CircleCI's 2.1 YAML
version: 2.1
# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       WorkflowID:
#         Description: The ID of the workflow.
#         Default: udapeople-kk1j287dhjppmz437      
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name backend-stack
#             aws cloudformation delete-stack --stack-name frontend-stack


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install  
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build  
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test-frontend
          command: |
            curl icanhazip.com 
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test-backend
          command: | 
            curl icanhazip.com
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan-backend
          command: | 
            cd backend
            npm install   
            npm audit fix --audit-level=critical --force        
            npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan-backend
          command: | 
            cd backend
            npm install
            npm audit fix --force
            npm audit        

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #             --tags project=udapeople 
  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #             --tags project=udapeople  
      
  #     - run: 
  #         name: install gzip
  #         command:
  #           #yum install tar -y
  #           #yum install gzip -y
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt
  #     #
  #     # Here's where you will add some code to rollback on failure  

  configure-infrastructure:
    docker:
      - image: ansible/centos7-ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - run:
          name: Check python
          command: python --version
      - run:
          name: Verify SSH host
          command: ssh-keyscan -H 44.199.167.151 >> ~/.ssh/known_hosts
      - run:
          name: Install dependencies
          command: |
            echo "Install step"
            ansible --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible 
            ansible-playbook -i inventory.txt configure-server.yml
            
      # Here's where you will add some code to rollback on failure      
      #ansible -i inventory.txt -m ping web
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            pwd
            echo "step npm install"
            npm install
            npm run build
            echo "run migrate"
            npm run migrations > migrations_dump.txt 
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            pwd
            cat migrations_dump.txt
            ls -la
            if grep -q "has been executed successfully." /home/circleci/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/M8NTh9kT327fA6ombuZZS/migration_udapeople-kk1j287dhjppmz437  -d '1'
            fi
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cat /etc/os-release
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            npm install
            npm run build
            tar -czvf artifact-udapeople-frontend-001fa97.tar.gz dist

      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      #       export API_URL="http://${BACKEND_IP}:3030"
      #       echo "${API_URL}"
      # - run:
      #     name: Deploy frontend objects
      #     command: |
      #       # your code here
      # Here's where you will add some code to rollback on failure        

workflows:
  version: 2
  udacity-project-3:
    jobs:

      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend: 
          requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      #- scan-backend:
      #    requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend]
      #     filters:
      #       branches:
      #         only: [master]
      - configure-infrastructure
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]